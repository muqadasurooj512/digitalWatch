i am a javascript experince i am making tutorials for javascript on youtube today is my first introduction video what i tell in my video 
pls provide m ethe scriptr in urdu hinglish

import React, { useEffect, useState } from "react";

import { StyleSheet, Text, View, TouchableOpacity } from "react-native";
import { useNavigation } from "@react-navigation/native";

const HomeScreen = () => {
  const navigation = useNavigation();
  const [second, setSecond] = useState(0);
  const [minute, setMinute] = useState(0);
  const [hour, setHour] = useState(0);
  const [weatherData, setWeatherData] = useState(null);
  const [loading, setLoading] = useState(false); // State to manage loading
 const [user, setUser] = useState(null);
  const getWeatherByCity = async () => {
    if (loading) return; // Prevent further requests while loading
    setLoading(true);
    try {
      const response = await fetch(
        'https://api.openweathermap.org/data/2.5/weather?lat=34.0522&lon=-118.2437&appid=3a587c420e40a4b7533fbefd82bea348'
      );
      const json = await response.json();
      setWeatherData(json);
      console.log(json);
    } catch (error) {
      console.log('Error fetching weather data:', error);
    } finally {
      setLoading(false); // Reset loading state
    }
  };

  useEffect(() => {
    const interval = setInterval(() => {
      setSecond((prevSecond) => {
        if (prevSecond === 59) {
          setMinute((prevMinute) => {
            if (prevMinute === 59) {
              setHour((prevHour) => (prevHour === 23 ? 0 : prevHour + 1));
              return 0;
            }
            return prevMinute + 1;
          });
          return 0;
        }
        return prevSecond + 1;
      });
    }, 1000);

    return () => clearInterval(interval);
  }, []);

  const formatTime = (time) => (time < 10 ? `0${time}` : time);

  const handleReset = () => {
    setSecond(0);
    setMinute(0);
    setHour(0);
  };

  return (
    <View style={styles.main}>
      <TouchableOpacity
        onPress={() => navigation.openDrawer()}
        style={styles.drawerButton}
      >
        <Text style={styles.buttonText}>Drawer</Text>
      </TouchableOpacity>
            
      <View style={styles.container}>
        <Text style={styles.heading}>CLOCK</Text>
        <View style={styles.display}>
          <Text style={styles.counts}>
            {formatTime(hour)}:{formatTime(minute)}:{formatTime(second)}
          </Text>
        </View>
        <View style={styles.controls}>
          <TouchableOpacity style={styles.button} onPress={handleReset}>
            <Text style={styles.buttonText}>Reset</Text>
          </TouchableOpacity>
          <TouchableOpacity
            style={styles.button}
            onPress={getWeatherByCity}
            disabled={loading} // Disable the button when loading
          >
            <Text style={styles.buttonText}>{loading ? "Loading..." : "Weather"}</Text>
          </TouchableOpacity>
        </View>
        {weatherData && (
          <View style={styles.weatherContainer}>
            <Text style={styles.weatherText}>
              {weatherData.weather[0].description}, {Math.round(weatherData.main.temp - 273.15)}Â°C
            </Text>
          </View>
        )}
      </View>
    </View>
  );
};

const styles = StyleSheet.create({
  main: {
    flex: 1,
    backgroundColor: "#e3f2fd", // Light blue background
  },
  drawerButton: {
    position: 'absolute',
    top: 10,
    left: 5,
    zIndex: 1, // Ensure it appears above other components
    padding: 10,
    borderRadius: 5,
  },
  container: {
    flex: 1,
    justifyContent: "center",
    alignItems: "center",
  },
  display: {
    height: 200,
    width: 300,
    justifyContent: "center",
    alignItems: "center",
    backgroundColor: "#6200ea", // Purple background
    borderRadius: 20,
    shadowColor: "#000",
    shadowOffset: { width: 0, height: 2 },
    shadowOpacity: 0.25,
    shadowRadius: 3.84,
    elevation: 5, // Android shadow
  },
  heading: {
    fontSize: 36,
    fontWeight: "bold",
    color: "#1a0f0f",
    marginBottom: 20,
  },
  counts: {
    fontSize: 50,
    color: "#ffffff", // White color for the clock
    fontWeight: "bold",
    letterSpacing: 2, // Added spacing for aesthetics
  },
  controls: {
    height: 150,
    width: 300,
    backgroundColor: "#000", // Black background for controls
    borderRadius: 10,
    justifyContent: "space-around",
    alignItems: "center",
    marginTop: 20,
    padding: 10,
    shadowColor: "#000",
    shadowOffset: { width: 0, height: 1 },
    shadowOpacity: 0.2,
    shadowRadius: 2,
    elevation: 3, // Android shadow for controls
  },
  button: {
    backgroundColor: "#ff9800", // Orange background for buttons
    paddingVertical: 15,
    paddingHorizontal: 25,
    borderRadius: 10,
    width: "80%",
    alignItems: "center",
  },
  buttonText: {
    color: "#1a47aa",
    fontSize: 18,
    fontWeight: "bold",
  },
  weatherContainer: {
    marginTop: 20,
    alignItems: "center",
    padding: 10,
    borderRadius: 10,
    backgroundColor: "#ffffff", // White background for weather info
    shadowColor: "#000",
    shadowOffset: { width: 0, height: 1 },
    shadowOpacity: 0.2,
    shadowRadius: 2,
    elevation: 2,
  },
  weatherText: {
    color: "#000000",
    fontSize: 18,
    fontWeight: "bold",
  },
});

export default HomeScreen;
import { StyleSheet, Text, View, Image, TouchableOpacity } from 'react-native';
import { useState,useEffect } from 'react';
import { launchImageLibrary } from 'react-native-image-picker';
import Icons from 'react-native-vector-icons/Ionicons';
import AsyncStorage from '@react-native-async-storage/async-storage';
import { Button } from 'react-native-paper';
const BookPublish = () => {
  const [image, setImage] = useState(null);
  const SelectImage =async() => {
    let options = {
      mediaType: 'photo',
      maxWidth: 2000,
      maxHeight: 2000,
      quality: 1,
      includeBase64: true,
    };

    launchImageLibrary(options,async (response) => {
      if (response.didCancel) {
        console.log('User cancelled image picker');
        return;
      } else if (response.error) {
        console.log(response.error);
        return;
      } else if (response.assets && response.assets.length > 0) {
        const selectedImage = response.assets[0];
        console.log("image", selectedImage);
        setImage(selectedImage);
        await AsyncStorage.setItem('storedImage', selectedImage.base64);
      }
    });
  };
  const retrieveImage = async () => {
    const storedImage = await AsyncStorage.getItem('storedImage');
    if (storedImage) {
      setImage({ base64: storedImage });
    }
  };

  useEffect(() => {
    retrieveImage();
  }, []);

  const clearImage = async () => {
    await AsyncStorage.removeItem('storedImage');
    setImage(null);
  };


  return (
    <View style={styles.container}>
      <TouchableOpacity
        onPress={SelectImage}
        style={styles.drawerButton}
      >
        {image ? (
          <Image
            style={{ width: 300, height: 200 }}
            source={{ uri: `data:${image.type};base64,${image.base64}` }}
          />
        ) : (
          <Text>choose image</Text>
        )}
      </TouchableOpacity>
      <Button onPress={clearImage}>Clear Image</Button>
    </View>
  );
};

export default BookPublish;

const styles = StyleSheet.create({
  container: {
    flex: 1,

  },
  drawerButton: {
width:300,
height:200,

    padding: 20,
  },

});
